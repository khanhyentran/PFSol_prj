--- rcar-csi2.c	2018-04-06 14:20:34.000000000 +0700
+++ rza-csi2.c	2018-05-30 10:43:36.427274000 +0700
@@ -41,8 +41,6 @@
 #define PHYCNT_SHUTDOWNZ		BIT(17)
 #define PHYCNT_RSTZ			BIT(16)
 #define PHYCNT_ENABLECLK		BIT(4)
-#define PHYCNT_ENABLE_3			BIT(3)
-#define PHYCNT_ENABLE_2			BIT(2)
 #define PHYCNT_ENABLE_1			BIT(1)
 #define PHYCNT_ENABLE_0			BIT(0)
 
@@ -57,7 +55,6 @@
  * VCDT2[0-15]: Channel 3 VCDT2[16-31]: Channel 4
  */
 #define VCDT_REG			0x10
-#define VCDT2_REG			0x14
 #define VCDT_VCDTN_EN			BIT(15)
 #define VCDT_SEL_VC(n)			(((n) & 0x3) << 8)
 #define VCDT_SEL_DTN_ON			BIT(6)
@@ -69,9 +66,6 @@
 /* Field Detection Control */
 #define FLD_REG				0x1c
 #define FLD_FLD_NUM(n)			(((n) & 0xff) << 16)
-#define FLD_FLD_EN4			BIT(3)
-#define FLD_FLD_EN3			BIT(2)
-#define FLD_FLD_EN2			BIT(1)
 #define FLD_FLD_EN			BIT(0)
 
 /* Automatic Standby Control */
@@ -107,30 +101,29 @@
 #define LINKCNT_REG			0x48
 #define LINKCNT_MONITOR_EN		BIT(31)
 #define LINKCNT_REG_MONI_PACT_EN	BIT(25)
-#define LINKCNT_ICLK_NONSTOP		BIT(24)
 
 /* Lane Swap */
 #define LSWAP_REG			0x4c
-#define LSWAP_L3SEL(n)			(((n) & 0x3) << 6)
-#define LSWAP_L2SEL(n)			(((n) & 0x3) << 4)
 #define LSWAP_L1SEL(n)			(((n) & 0x3) << 2)
 #define LSWAP_L0SEL(n)			(((n) & 0x3) << 0)
 
-/* PHY Test Interface Write Register */
-#define PHTW_REG			0x50
-#define PHTW_DWEN			BIT(24)
-#define PHTW_CWEN			BIT(8)
-#define PHTW_TESTDIN_CODE		0x44	/* for r8a77990 */
-#define PHTW_TESTDIN_DATA(n)		((n & 0xff) << 16)
-
-/* PHY Test Interface Clear */
-#define PHTC_REG			0x58
-#define PHTC_TESTCLR			BIT(0)
-
-/* PHY Frequency Control */
-#define PHYPLL_REG			0x68
-#define PHYPLL_HSFREQRANGE(n)		((n) << 16)
+/* PHY timing register 1*/
+#define PHYTIM1_REG			0x264
+#define PHYTIM1_T_INIT_SLAVE(n)		((n) & 0xFFFF)
+
+/* PHY timing register 2*/
+#define PHYTIM2_REG			0x268
+#define PHYTIM2_TCLK_SETTLE(n)		(((n) & 0x3F) << 8)
+#define PHYTIM2_TCLK_PREPARE(n)		((n) & 0x3F)
+#define PHYTIM2_TCLK_MISS(n)		(((n) & 0x1F) << 16)
+
+/* PHY timing register 3*/
+#define PHYTIM3_REG			0x26c
+#define PHYTIM3_THS_SETTLE(n)		(((n) & 0x3F) << 8)
+#define PHYTIM3_THS_PREPARE(n)		((n) & 0x3F)
 
+/*PHYDIM register*/
+#define PHYDIM				0x180
 struct phypll_hsfreqrange {
 	u16 mbps;
 	u16 reg;
@@ -141,167 +134,6 @@
 	u32		phtw_reg;
 };
 
-static const struct phypll_hsfreqrange hsfreqrange_h3_v3h_m3n[] = {
-	{ .mbps =   80, .reg = 0x00 },
-	{ .mbps =   90, .reg = 0x10 },
-	{ .mbps =  100, .reg = 0x20 },
-	{ .mbps =  110, .reg = 0x30 },
-	{ .mbps =  120, .reg = 0x01 },
-	{ .mbps =  130, .reg = 0x11 },
-	{ .mbps =  140, .reg = 0x21 },
-	{ .mbps =  150, .reg = 0x31 },
-	{ .mbps =  160, .reg = 0x02 },
-	{ .mbps =  170, .reg = 0x12 },
-	{ .mbps =  180, .reg = 0x22 },
-	{ .mbps =  190, .reg = 0x32 },
-	{ .mbps =  205, .reg = 0x03 },
-	{ .mbps =  220, .reg = 0x13 },
-	{ .mbps =  235, .reg = 0x23 },
-	{ .mbps =  250, .reg = 0x33 },
-	{ .mbps =  275, .reg = 0x04 },
-	{ .mbps =  300, .reg = 0x14 },
-	{ .mbps =  325, .reg = 0x25 },
-	{ .mbps =  350, .reg = 0x35 },
-	{ .mbps =  400, .reg = 0x05 },
-	{ .mbps =  450, .reg = 0x16 },
-	{ .mbps =  500, .reg = 0x26 },
-	{ .mbps =  550, .reg = 0x37 },
-	{ .mbps =  600, .reg = 0x07 },
-	{ .mbps =  650, .reg = 0x18 },
-	{ .mbps =  700, .reg = 0x28 },
-	{ .mbps =  750, .reg = 0x39 },
-	{ .mbps =  800, .reg = 0x09 },
-	{ .mbps =  850, .reg = 0x19 },
-	{ .mbps =  900, .reg = 0x29 },
-	{ .mbps =  950, .reg = 0x3a },
-	{ .mbps = 1000, .reg = 0x0a },
-	{ .mbps = 1050, .reg = 0x1a },
-	{ .mbps = 1100, .reg = 0x2a },
-	{ .mbps = 1150, .reg = 0x3b },
-	{ .mbps = 1200, .reg = 0x0b },
-	{ .mbps = 1250, .reg = 0x1b },
-	{ .mbps = 1300, .reg = 0x2b },
-	{ .mbps = 1350, .reg = 0x3c },
-	{ .mbps = 1400, .reg = 0x0c },
-	{ .mbps = 1450, .reg = 0x1c },
-	{ .mbps = 1500, .reg = 0x2c },
-	/* guard */
-	{ .mbps =   0,	.reg = 0x00 },
-};
-
-static const struct phypll_hsfreqrange hsfreqrange_m3w_h3es1[] = {
-	{ .mbps =   80,	.reg = 0x00 },
-	{ .mbps =   90,	.reg = 0x10 },
-	{ .mbps =  100,	.reg = 0x20 },
-	{ .mbps =  110,	.reg = 0x30 },
-	{ .mbps =  120,	.reg = 0x01 },
-	{ .mbps =  130,	.reg = 0x11 },
-	{ .mbps =  140,	.reg = 0x21 },
-	{ .mbps =  150,	.reg = 0x31 },
-	{ .mbps =  160,	.reg = 0x02 },
-	{ .mbps =  170,	.reg = 0x12 },
-	{ .mbps =  180,	.reg = 0x22 },
-	{ .mbps =  190,	.reg = 0x32 },
-	{ .mbps =  205,	.reg = 0x03 },
-	{ .mbps =  220,	.reg = 0x13 },
-	{ .mbps =  235,	.reg = 0x23 },
-	{ .mbps =  250,	.reg = 0x33 },
-	{ .mbps =  275,	.reg = 0x04 },
-	{ .mbps =  300,	.reg = 0x14 },
-	{ .mbps =  325,	.reg = 0x05 },
-	{ .mbps =  350,	.reg = 0x15 },
-	{ .mbps =  400,	.reg = 0x25 },
-	{ .mbps =  450,	.reg = 0x06 },
-	{ .mbps =  500,	.reg = 0x16 },
-	{ .mbps =  550,	.reg = 0x07 },
-	{ .mbps =  600,	.reg = 0x17 },
-	{ .mbps =  650,	.reg = 0x08 },
-	{ .mbps =  700,	.reg = 0x18 },
-	{ .mbps =  750,	.reg = 0x09 },
-	{ .mbps =  800,	.reg = 0x19 },
-	{ .mbps =  850,	.reg = 0x29 },
-	{ .mbps =  900,	.reg = 0x39 },
-	{ .mbps =  950,	.reg = 0x0A },
-	{ .mbps = 1000,	.reg = 0x1A },
-	{ .mbps = 1050,	.reg = 0x2A },
-	{ .mbps = 1100,	.reg = 0x3A },
-	{ .mbps = 1150,	.reg = 0x0B },
-	{ .mbps = 1200,	.reg = 0x1B },
-	{ .mbps = 1250,	.reg = 0x2B },
-	{ .mbps = 1300,	.reg = 0x3B },
-	{ .mbps = 1350,	.reg = 0x0C },
-	{ .mbps = 1400,	.reg = 0x1C },
-	{ .mbps = 1450,	.reg = 0x2C },
-	{ .mbps = 1500,	.reg = 0x3C },
-	/* guard */
-	{ .mbps =   0,	.reg = 0x00 },
-};
-
-static const struct phtw_freqrange phtw_e3_v3m[] = {
-	{ .mbps = 89,	.phtw_reg =  0x00 },
-	{ .mbps = 99,	.phtw_reg =  0x20 },
-	{ .mbps = 109,	.phtw_reg =  0x40 },
-	{ .mbps = 129,	.phtw_reg =  0x02 },
-	{ .mbps = 139,	.phtw_reg =  0x22 },
-	{ .mbps = 149,	.phtw_reg =  0x42 },
-	{ .mbps = 169,	.phtw_reg =  0x04 },
-	{ .mbps = 179,	.phtw_reg =  0x24 },
-	{ .mbps = 199,	.phtw_reg =  0x44 },
-	{ .mbps = 219,	.phtw_reg =  0x06 },
-	{ .mbps = 239,	.phtw_reg =  0x26 },
-	{ .mbps = 249,	.phtw_reg =  0x46 },
-	{ .mbps = 269,	.phtw_reg =  0x08 },
-	{ .mbps = 299,	.phtw_reg =  0x28 },
-	{ .mbps = 329,	.phtw_reg =  0x0a },
-	{ .mbps = 359,	.phtw_reg =  0x2a },
-	{ .mbps = 399,	.phtw_reg =  0x4a },
-	{ .mbps = 449,	.phtw_reg =  0x0c },
-	{ .mbps = 499,	.phtw_reg =  0x2c },
-	{ .mbps = 549,	.phtw_reg =  0x0e },
-	{ .mbps = 599,	.phtw_reg =  0x2e },
-	{ .mbps = 649,	.phtw_reg =  0x10 },
-	{ .mbps = 699,	.phtw_reg =  0x30 },
-	{ .mbps = 749,	.phtw_reg =  0x12 },
-	{ .mbps = 799,	.phtw_reg =  0x32 },
-	{ .mbps = 849,	.phtw_reg =  0x52 },
-	{ .mbps = 899,	.phtw_reg =  0x72 },
-	{ .mbps = 949,	.phtw_reg =  0x14 },
-	{ .mbps = 999,	.phtw_reg =  0x34 },
-	{ .mbps = 1049,	.phtw_reg =  0x54 },
-	{ .mbps = 1099,	.phtw_reg =  0x74 },
-	{ .mbps = 1149,	.phtw_reg =  0x16 },
-	{ .mbps = 1199,	.phtw_reg =  0x36 },
-	{ .mbps = 1249,	.phtw_reg =  0x56 },
-	{ .mbps = 1299,	.phtw_reg =  0x76 },
-	{ .mbps = 1349,	.phtw_reg =  0x18 },
-	{ .mbps = 1399,	.phtw_reg =  0x38 },
-	{ .mbps = 1449,	.phtw_reg =  0x58 },
-	{ .mbps = 1500,	.phtw_reg =  0x78 },
-	/* guard */
-	{ .mbps =   0,	.phtw_reg = 0x00 },
-};
-
-static const struct phtw_freqrange phtw_m3n[] = {
-	{ .mbps =   80,	.phtw_reg = 0x018601f1 },
-	{ .mbps =   90,	.phtw_reg = 0x018601f1 },
-	{ .mbps =  100,	.phtw_reg = 0x018701f1 },
-	{ .mbps =  110,	.phtw_reg = 0x018701f1 },
-	{ .mbps =  120,	.phtw_reg = 0x018801f1 },
-	{ .mbps =  130,	.phtw_reg = 0x018801f1 },
-	{ .mbps =  140,	.phtw_reg = 0x018901f1 },
-	{ .mbps =  150,	.phtw_reg = 0x018901f1 },
-	{ .mbps =  160,	.phtw_reg = 0x018a01f1 },
-	{ .mbps =  170,	.phtw_reg = 0x018a01f1 },
-	{ .mbps =  180,	.phtw_reg = 0x018b01f1 },
-	{ .mbps =  190,	.phtw_reg = 0x018b01f1 },
-	{ .mbps =  205,	.phtw_reg = 0x018c01f1 },
-	{ .mbps =  220,	.phtw_reg = 0x018d01f1 },
-	{ .mbps =  235,	.phtw_reg = 0x018e01f1 },
-	{ .mbps =  250,	.phtw_reg = 0x018e01f1 },
-	/* guard */
-	{ .mbps =   0,	.phtw_reg = 0x00 },
-};
-
 /* PHY ESC Error Monitor */
 #define PHEERM_REG			0x74
 
@@ -311,13 +143,6 @@
 /* PHY Data Lane Monitor */
 #define PHDLM_REG			0x7c
 
-/* CSI0CLK Frequency Configuration Preset Register */
-#define CSI0CLKFCPR_REG			0x260
-#define CSI0CLKFREQRANGE(n)		((n & 0x3f) << 16)
-
-/* device information */
-#define R8A77990			BIT(0)
-
 struct rcar_csi2_format {
 	unsigned int code;
 	unsigned int datatype;
@@ -418,7 +243,12 @@
 
 		if ((rcar_csi2_read(priv, PHCLM_REG) & 1) == 1 &&
 		    (rcar_csi2_read(priv, PHDLM_REG) & lane_mask) == lane_mask)
+		{
+			rcar_csi2_write(priv, INTSTATE_REG,
+				INTSTATE_INT_ULPS_START |
+				INTSTATE_INT_ULPS_END);
 			return 0;
+		}
 
 		msleep(20);
 	}
@@ -428,101 +258,18 @@
 	return -ETIMEDOUT;
 }
 
-static int rcar_csi2_calc_phypll(struct rcar_csi2 *priv, unsigned int bpp,
-				 u32 *phypll,
-				 u32 *phtw,
-				 u32 *testin)
-{
-
-	const struct phypll_hsfreqrange *hsfreq;
-	const struct phtw_freqrange *phtwfreq;
-	struct media_pad *pad, *source_pad;
-	struct v4l2_subdev *source = NULL;
-	struct v4l2_ctrl *ctrl;
-	u64 mbps;
-
-	/* Get remote subdevice */
-	pad = &priv->subdev.entity.pads[RCAR_CSI2_SINK];
-	source_pad = media_entity_remote_pad(pad);
-	if (!source_pad) {
-		dev_err(priv->dev, "Could not find remote source pad\n");
-		return -ENODEV;
-	}
-
-	source = media_entity_to_v4l2_subdev(source_pad->entity);
-
-	dev_dbg(priv->dev, "Using source %s pad: %u\n", source->name,
-		source_pad->index);
-
-	/* Read the pixel rate control from remote */
-	ctrl = v4l2_ctrl_find(source->ctrl_handler, V4L2_CID_PIXEL_RATE);
-	if (!ctrl) {
-		dev_err(priv->dev, "no link freq control in subdev %s\n",
-			source->name);
-		return -EINVAL;
-	}
-
-	/* Calculate the phypll */
-	mbps = v4l2_ctrl_g_ctrl_int64(ctrl) * bpp;
-
-	/* Hblank's margin is 1.05 times of the horizontal size */
-	mbps = div_u64(mbps * 105, 100);
-
-	/* Vblank's margin is 1.13 times of the vertical size */
-	mbps = div_u64(mbps * 113, 100);
-
-	do_div(mbps, priv->lanes * 1000000);
-
-	if (priv->info->phtw_testin) {
-		for (phtwfreq = priv->info->phtw; phtwfreq->mbps != 0;
-		     phtwfreq++)
-			if (phtwfreq->mbps >= mbps)
-				break;
-
-		if (!phtwfreq->mbps) {
-			dev_err(priv->dev, "Unsupported PHY speed (%llu Mbps)",
-				mbps);
-			return -ERANGE;
-		}
-		*testin = PHTW_TESTDIN_DATA(phtwfreq->phtw_reg);
-
-		dev_dbg(priv->dev, "TESTDIN_DATA requested %llu got %u Mbps\n",
-			mbps, phtwfreq->mbps);
-
-		return 0;
-	}
-
-	for (hsfreq = priv->info->hsfreqrange; hsfreq->mbps != 0; hsfreq++)
-		if (hsfreq->mbps >= mbps)
-			break;
-
-	if (!hsfreq->mbps) {
-		dev_err(priv->dev, "Unsupported PHY speed (%llu Mbps)", mbps);
-		return -ERANGE;
-	}
-
-	dev_dbg(priv->dev, "PHY HSFREQRANGE requested %llu got %u Mbps\n", mbps,
-		hsfreq->mbps);
-
-	if (!priv->info->phtw) {
-		*phypll = PHYPLL_HSFREQRANGE(hsfreq->reg);
-		return 0;
-	}
-
-	for (phtwfreq = priv->info->phtw; phtwfreq->mbps != 0; phtwfreq++)
-		if (phtwfreq->mbps >= mbps)
-			break;
-
-	*phtw = phtwfreq->phtw_reg;
-	*phypll = PHYPLL_HSFREQRANGE(hsfreq->reg);
+static int rcar_csi2_calc_phy_timing(struct rcar_csi2 *priv)
+{
+	rcar_csi2_write(priv, PHYTIM3_REG, PHYTIM3_THS_PREPARE(0x9) | PHYTIM3_THS_SETTLE(0xE));
+	rcar_csi2_write(priv, PHYTIM2_REG, PHYTIM2_TCLK_PREPARE(0xA) | PHYTIM2_TCLK_SETTLE(0xF) | PHYTIM2_TCLK_MISS(0x3));
+	rcar_csi2_write(priv, PHYTIM1_REG, PHYTIM1_T_INIT_SLAVE(0x338F));
 
 	return 0;
 }
-
 static int rcar_csi2_start(struct rcar_csi2 *priv, struct v4l2_subdev *nextsd)
 {
 	const struct rcar_csi2_format *format;
-	u32 phycnt, phypll = 0, tmp, phtw = 0, fld = 0, testin = 0;
+	u32 phycnt, tmp, fld = 0;
 	u32 vcdt = 0, vcdt2 = 0;
 	unsigned int i;
 	int ret;
@@ -564,23 +311,9 @@
 			vcdt2 |= tmp << ((i % 2) * 16);
 	}
 
-	switch (priv->lanes) {
-	case 1:
-		phycnt = PHYCNT_ENABLECLK | PHYCNT_ENABLE_0;
-		break;
-	case 2:
-		phycnt = PHYCNT_ENABLECLK | PHYCNT_ENABLE_1 | PHYCNT_ENABLE_0;
-		break;
-	case 4:
-		phycnt = PHYCNT_ENABLECLK | PHYCNT_ENABLE_3 | PHYCNT_ENABLE_2 |
-			PHYCNT_ENABLE_1 | PHYCNT_ENABLE_0;
-		break;
-	default:
-		return -EINVAL;
-	}
+	phycnt = PHYCNT_ENABLECLK | PHYCNT_ENABLE_1 | PHYCNT_ENABLE_0;
 
-	ret = rcar_csi2_calc_phypll(priv, format->bpp, &phypll, &phtw,
-				    &testin);
+	rcar_csi2_calc_phy_timing(priv);
 	if (ret)
 		return ret;
 
@@ -593,57 +326,20 @@
 	/* Init */
 	rcar_csi2_write(priv, TREF_REG, TREF_TREF);
 	rcar_csi2_reset(priv);
-	rcar_csi2_write(priv, PHTC_REG, 0);
 
-	/* Configure */
-	rcar_csi2_write(priv, FLD_REG, fld | FLD_FLD_EN4 |
-			FLD_FLD_EN3 | FLD_FLD_EN2 | FLD_FLD_EN);
+	/* do not check "Input data is interfaced?"*/
+	rcar_csi2_write(priv, FLD_REG, fld | FLD_FLD_EN);
+
 	rcar_csi2_write(priv, VCDT_REG, vcdt);
-	if (priv->info->device != R8A77990)
-		rcar_csi2_write(priv, VCDT2_REG, vcdt2);
+
 	/* Lanes are zero indexed */
 	rcar_csi2_write(priv, LSWAP_REG,
 			LSWAP_L0SEL(priv->lane_swap[0] - 1) |
-			LSWAP_L1SEL(priv->lane_swap[1] - 1) |
-			LSWAP_L2SEL(priv->lane_swap[2] - 1) |
-			LSWAP_L3SEL(priv->lane_swap[3] - 1));
-
-	if (priv->info->have_phtw) {
-		/*
-		 * This is for H3 ES2.0 and M3N ES1.0
-		 */
-		rcar_csi2_write(priv, PHTW_REG, 0x01cc01e2);
-		rcar_csi2_write(priv, PHTW_REG, 0x010101e3);
-		rcar_csi2_write(priv, PHTW_REG, 0x011101e4);
-		rcar_csi2_write(priv, PHTW_REG, 0x010101e5);
-		rcar_csi2_write(priv, PHTW_REG, 0x01100104);
-
-		if (phtw) {
-			rcar_csi2_write(priv, PHTW_REG, 0x01390105);
-			rcar_csi2_write(priv, PHTW_REG, phtw);
-		}
-		rcar_csi2_write(priv, PHTW_REG, 0x01380108);
-		rcar_csi2_write(priv, PHTW_REG, 0x01010100);
-		rcar_csi2_write(priv, PHTW_REG, 0x014b01ac);
-		rcar_csi2_write(priv, PHTW_REG, 0x01030100);
-		rcar_csi2_write(priv, PHTW_REG, 0x01800107);
-	}
-
-	/* Start */
-	if (priv->info->phtw_testin)
-		rcar_csi2_write(priv, PHTW_REG, PHTW_DWEN | PHTW_CWEN |
-				PHTW_TESTDIN_CODE | testin);
-	else
-		rcar_csi2_write(priv, PHYPLL_REG, phypll);
-
-	/* Set frequency range if we have it */
-	if (priv->info->csi0clkfreqrange)
-		rcar_csi2_write(priv, CSI0CLKFCPR_REG,
-				CSI0CLKFREQRANGE(priv->info->csi0clkfreqrange));
+			LSWAP_L1SEL(priv->lane_swap[1] - 1));
 
 	rcar_csi2_write(priv, PHYCNT_REG, phycnt);
 	rcar_csi2_write(priv, LINKCNT_REG, LINKCNT_MONITOR_EN |
-			LINKCNT_REG_MONI_PACT_EN | LINKCNT_ICLK_NONSTOP);
+			LINKCNT_REG_MONI_PACT_EN);
 	rcar_csi2_write(priv, PHYCNT_REG, phycnt | PHYCNT_SHUTDOWNZ);
 	rcar_csi2_write(priv, PHYCNT_REG, phycnt | PHYCNT_SHUTDOWNZ |
 			PHYCNT_RSTZ);
@@ -654,7 +350,6 @@
 static void rcar_csi2_stop(struct rcar_csi2 *priv)
 {
 	rcar_csi2_write(priv, PHYCNT_REG, 0);
-	iowrite32(PHTC_TESTCLR, priv->base + PHTC_REG);
 
 	rcar_csi2_reset(priv);
 }
@@ -875,7 +570,7 @@
 
 	dev_dbg(priv->dev, "Found '%pOF'\n",
 		to_of_node(priv->remote.match.fwnode.fwnode));
-
+	
 	return v4l2_async_subdev_notifier_register(&priv->subdev,
 						   &priv->notifier);
 }
@@ -906,67 +601,25 @@
 	return 0;
 }
 
-static const struct rcar_csi2_info rcar_csi2_info_r8a7795 = {
-	.hsfreqrange = hsfreqrange_h3_v3h_m3n,
-	.clear_ulps = true,
-	.have_phtw = true,
-	.csi0clkfreqrange = 0x20,
-};
 
-static const struct rcar_csi2_info rcar_csi2_info_r8a7795es1 = {
-	.hsfreqrange = hsfreqrange_m3w_h3es1,
-};
 
-static const struct rcar_csi2_info rcar_csi2_info_r8a7796 = {
-	.hsfreqrange = hsfreqrange_m3w_h3es1,
-};
-
-static const struct rcar_csi2_info rcar_csi2_info_r8a77965 = {
-	.hsfreqrange = hsfreqrange_h3_v3h_m3n,
-	.phtw = phtw_m3n,
-	.clear_ulps = true,
-	.have_phtw = true,
-	.csi0clkfreqrange = 0x20,
-};
-
-static const struct rcar_csi2_info rcar_csi2_info_r8a77990 = {
+static const struct rcar_csi2_info rza_csi2_info_r7s9210 = {
 	.phtw_testin = true,
-	.phtw = phtw_e3_v3m,
-	.device = R8A77990,
 };
 
 static const struct of_device_id rcar_csi2_of_table[] = {
 	{
-		.compatible = "renesas,r8a7795-csi2",
-		.data = &rcar_csi2_info_r8a7795,
-	},
-	{
-		.compatible = "renesas,r8a7796-csi2",
-		.data = &rcar_csi2_info_r8a7796,
-	},
-	{
-		.compatible = "renesas,r8a77965-csi2",
-		.data = &rcar_csi2_info_r8a77965,
-	},
-	{
-		.compatible = "renesas,r8a77990-csi2",
-		.data = &rcar_csi2_info_r8a77990,
+		.compatible = "renesas,r7s9210-csi2",
+		.data = &rza_csi2_info_r7s9210,
 	},
 	{ /* sentinel */ },
 };
 MODULE_DEVICE_TABLE(of, rcar_csi2_of_table);
 
-static const struct soc_device_attribute r8a7795es1[] = {
-	{
-		.soc_id = "r8a7795", .revision = "ES1.*",
-		.data = &rcar_csi2_info_r8a7795es1,
-	},
-	{ /* sentinel */}
-};
+
 
 static int rcar_csi2_probe(struct platform_device *pdev)
 {
-	const struct soc_device_attribute *attr;
 	struct rcar_csi2 *priv;
 	unsigned int i;
 	int ret;
@@ -977,11 +630,6 @@
 
 	priv->info = of_device_get_match_data(&pdev->dev);
 
-	/* r8a7795 ES1.x behaves different then ES2.0+ but no own compat */
-	attr = soc_device_match(r8a7795es1);
-	if (attr)
-		priv->info = attr->data;
-
 	priv->dev = &pdev->dev;
 
 	mutex_init(&priv->lock);
@@ -1089,3 +737,4 @@
 MODULE_AUTHOR("Niklas Söderlund <niklas.soderlund@ragnatech.se>");
 MODULE_DESCRIPTION("Renesas R-Car MIPI CSI-2 receiver");
 MODULE_LICENSE("GPL v2");
+
